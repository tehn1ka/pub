Tuples
Tuple is immutable data type or data that cannot be modified.
tuble1 = (1, 2, 3) using parentheses or round brackets
tuple1 = 1, 2, 3 set of values separated by comas

in order to read data we can use many of the methods
popular methods:
- for loop
- slicing 

Elements of tuple can be of any type
-	Number
-	String
-	Variable
-	Another tuple
Tuple can contain only one element:
tuple1 = 1, 
We need to make sure that we added comma at the end of element. Otherwise, Python has no way of distinguishing regular variable from the one element tuple.
 
Lists
Collection of multiple elements – List
Each element in a list has an index. The very first element in the list has an index of 0. The second element has an index 1 and so on.
If we want to get a specific element from the list, we can write its index in square brackets after the name of the list. 
We can change the value of the specific element in the list.
list1 = [“Apple”, “Orange”, “Lemon”]
print(list1[0])  Apple
list1[0] = Banana
This way we can change the element with index 0 in list1.
Built in len() function allows us to get the length of the certain list
Len(list1)  3
Keyword del allows us to delete element in the list.
del list1[0]  it deletes Banana and Orange gets index 0 instead.
We can also use negative indexes.
-1 used in the square brackets will get us the last element in the list, -2 one before and so on.
Values of indexes that do not exist cannot be accessed. In our list1 there is no 3rd index for example.
Slicing list
list1[start:end] start is the first index to print and end is the last. If there are more values after the last index it will not be printed.
list1[:] list all the indexes
list1[1:] start printing from index 1 till the end
list1[:3] print from the beginning till the index 3
list1[1:-1] print from index 1 till the last one not including it
List methods
list1.append(“Kiwi”) it will add element with index 3 and value Kiwi
list1.insert(2, “Mango”) it will add element with index 2 and value Mango and shift existing elements to the right increasing index by 1.
If required, we can swap values of elements in the list. For example:
list1[0], list1[1] = list1[1], list1[0] Banana and Orange will swap positions and indexes.
list1.sort() sort values ascendingly
list1.reverse() reverses all the elements in the list
list1.pop(2) removes element in the list with index 2. Difference between pop() and del is in output. Dell returns deleted elements.
Find in a list option
print(“Orange” in list1) it will return True as result
if we want to see if something is not in a list we will use not in instead of in
2D lists
List elements can also be lists.
List1 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11 , 12], [13, 14, 15, 16]]
To print 4th element in second list
print(list1[1][3])  [[9, 10, 11, 12]]
we can use sliceing
print(list1[2:3])  start printing from position 2 and print everything until position 3 😊
3D lists
school = [
    [
        ["Marko",  "Ana", "Dejan", "Danijela"],
        ["Zdravko", "Milutin", "Dragisa", "John"],
        ["Aleksandar", "Sara", "Ivana", "Petar"],
        ["Zorana", "Slavoljub", "Stevan", "Nemanja"],
    ],
    [
        ["Rodoljub", "Dunja", "Bojana", "Ana"],
        ["Milentije", "Marija", "Andrea", "Slaven"],
        ["Radomir", "Milutin", "Verica", "Sofija"],
        ["Slobodan", "Velibor", "Aleksandra", "Marina"],
    ]]  
Dictionary
usernames = {
	"marko": "mmark",
	"darko": "darko12",
	"dragan": "dragan_",
}
print(usernames[“marko”]) add key between square brackets instead of index as in lists
build in methods – keys, values and items
print(usernames.keys()) print list of keys
print(usermnames.values()) print list of values
print(usernames.items()) print key:value as a list of tuples

change value of a key
usernames[“marko”] = “marko123”

to add an item
usernames.update({“vidak”: “vidak123”}) add an item at the last position in dictionary
del usernames[“vidak”] removes item vidak from dictionary.
 
Control flow statements
If/else statements allow us to conditionally run code
if condition: example 2 + 2 == 4
    print("the condition is true!")
else:
    print("The condition is false")

multycondition statement
if condition1:
    print("the condition1 is true!")
elif condition2:
    print("the condition2 is true")
else:
    print("all conditions are false")

Loops
While loop makes it possible to repetitively execute code based on a certain condition
i = 1
while i < 6: # as long the condition returns true loop will continue to run repeatedly
    print(i)
    i += 1

secret_number = 3
guess = int(input("Guess a number: "))
while guess != secret_number:
    guess = int(input("Guess a number: "))
else:
    print("Congratulations, you got it!")
 
for loops
we can execute code for each item in a sequence with for … in loop
for i in range(10):
    if(i == 2): 
        continue # this means when I == 2 it will be skipped from print
    print("i is: ", i)

for i in range(10):
    if(i == 2): 
       break # this means when I == 2 it will break the loop
    print("i is: ", i)

